# Git 명령어 정리
## 주요 Git 명령어

본 문서는 Git의 주요 명령어 위주로 작성되었다.  

---
목차
- [Git 시작하기](#Git-시작하기)
     + [Git 환경설정](#Git-환경설정)
- [Git으로 버전 관리하기](#Git으로-버전-관리하기)
     + [Git 저장소 만들기](#Git-저장소-만들기)
     + [Git 버전 만들기](#Git-버전-만들기)
     + [커밋 내용 확인하기](#커밋-내용-확인하기)
- [Git과 브랜치](#Git과-브랜치)
     + [브랜치 만들기](#브랜치-만들기)
     + [브랜치 병합하기](#브랜치-병합하기)
---

### Git 시작하기
#### Git 환경설정
- __git config__ : 사용자 정보 입력 
Git은 버전을 저장할 때마다 그 버전을 만든 사용자 정보도 함께 저장한다.  
`--global` 옵션을 통해 현재 컴퓨터에 있는 모든 저장소에서 같은 사용자 정보를 사용하도록 설정한다.  
```
$ git config --global user.name "사용자이름"
$ git config --global user.email "사용자이메일"
```

### Git으로 버전 관리하기
#### Git 저장소 만들기
- __git init__ : Git 초기화하기  
이 명령을 사용하여 해당 디렉터리에서 Git을 사용할 수 있게 만든다.
```
$ git init
Initialized empty Git repository...
```

- __git status__ : Git 상태 확인하기  
이 명령을 사용하여 Git의 상태를 확인할 수 있다.
```
$ git status
On branch master
No Commits yet
nothing to commit ...
```

#### Git 버전 만들기
- __git add__ : 파일 스테이징하기  
작업 트리에서 파일을 만들거나 수정한 후, add 명령을 통해 Git에게 버전 만들 준비가 되었다고 알려주는 것이다.
```
$ git add <생성 또는 수정한 파일>
```

- __git commit__ : 스테이지에 올라온 파일 커밋하기  
Git에서 버전을 만드는 것을 커밋한다고 말한다.    
커밋할 때에는 그 버전에 어떤 변경사항이 있었는지 확인하기 위해 메시지를 함께 기록해야 한다.     
`-m` 옵션을 통해 커밋과 동시에 커밋메시지를 작성할 수 있다.    
```
$ git commit [-m "커밋메시지"]
```

#### 커밋 내용 확인하기
- __git log__ : 커밋 기록 살펴보기  
지금까지 커밋했던 기록을 확인할 수 있다.  
커밋을 만든 사람, 만든 시간, 커밋메시지를 확인할 수 있다. (이 정보들을 묶어 간단히 '커밋 로그'라고 한다.)  
```
$ git log
```

- __git diff__ : 변경 사항 확인하기  
작업 트리와 스테이지에 있는 파일을 서로 비교하거나, 스테이지와 저장소에 있는 최신 커밋을 비교할 수 있다.  
```
$ git diff
```